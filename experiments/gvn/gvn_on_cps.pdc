%GVN on CPS
%
%

<!-- TODO: bib, cites -->

Global Value Numbering (GVN) is an optimisation algorithm that takes advantage
of the Single Static Assignment (SSA) form to improve on Value Numbering.

Continuation Passing Style (CPS) is a special form of $\lambda$-calculus where
functions get a continuation argument to be used instead of returning. As was
exposed by TODO:cite, SSA and CPS can be translated into each other.

We here present a translation of the GVN algorithm to CPS.

#Notations

The BNF grammar of CPS terms is:

\begin{equation}
\begin{array}{r l}
m ::= & f \: v_1 \: \dots \: v_n \: k\\
    | & l \: v_1 \: \dots \: v_n\\
    | & if(v) \: then \:
          l_1 \: v_1 \: \dots \: v_n \:
        else \:
          l_2 \: u_1 \: \dots \: u_n\\
    | & let \: x \: = \: v \: in \: m\\
    | & letrec \: \{ \Lambda_i | 0 < i < n \} \: in \: m\\
k ::= & l\\
    | & \lambda_c \: x \: \cdot \: m\\
\Lambda ::= & f \: = \: \lambda_j \: x_1 \: \dots \: x_{n} \: \cdot \: m\\
v ::= & x\\
    | & 0 \: | \: 1 \: | \: \dots\\
    | & v_1 \: + \: v_2\\
    | & v_1 \: \times \: v_2\\
    | & \dots\\
\end{array}
\end{equation}

We use:

- $f$, $l$, $x$, and $y$ for variables,
- $i$ for indices, and
- $n$ as arbitrary bounds for indexes.

Also note that $\lambda$s have annotation: either $c$ for continuations, $j$
for jumps, or $p$ for procedures (not shown here). These annotations are for
compilation purpose: TODO: explain.

The corresponding OCaml type is:

\begin{verbatim}
type m =
  | Mapp  of (var * value list * continuation)
  | Mcont of (var * value list)
  | Mif   of (value * (var * var list) * (var * var list))
  | Mlet  of (var * value * m)
  | Mrec  of ((var * var list * m) list * m)
and continuation =
  | Cvar of var
  | C    of (var * m)
and value =
  | Vvar of var
  | Vcst of int
  | Vadd of (value * value)
  | Vmul of (value * value)
  | ..
\end{verbatim}

The notion of primitive operators (addition, multiplication) is purposedly
left unspecified but should be such as no function calls are made.

##About SSA to CPS translation

Here is a correspondence table for SSA to and from CPS translation:

+----------------------+-------------------------+---------------------------+
| SSA                  | CPS                     | OCaml CPS                 |
+======================+=========================+===========================+
| Procedure            | Lambda ($\lambda_p$)    | `var * var list * m`      |
+----------------------+-------------------------+---------------------------+
| Basic Block          | Lambda ($\lambda_j$)    | `var * var list * m`      |
+----------------------+-------------------------+---------------------------+
| Jump                 | Continuation Call       | `Mcont _`                 |
+----------------------+-------------------------+---------------------------+
| Procedure Call       | Application w/ Cont     | `Mapp (_, _, C _)`        |
+----------------------+-------------------------+---------------------------+
| Procedure Tail Call  | Application w/ Cont Var | `Mapp (_, _, Cvar _)`     |
+----------------------+-------------------------+---------------------------+
| Branch               | If-Then-Else            | `Mcond _`                 |
+----------------------+-------------------------+---------------------------+
| Return               | Continuation Call       | `Mcont _`                 |
+----------------------+-------------------------+---------------------------+

Here is are other important things to keep in mind:

- the dominance tree of the SSA CFG is directly reflected in the term
  structure of the CPS term, more specifically
    + when a block $b$ is the immediate dominator of $b_i$
    + the translation contains $letrec \Lambda_i in m$ where
    + $m$ is the translation of of $b$, and
    + $\Lambda_i$ is the translation of $b_i$;
- $\lambda$s are annotated with either `j`, `c`, or `p` to denote,
  respectively, jumps, continuations, or procedure call.



##Notions

We always work in the context of a $\lambda_p$; that is,
\`\`$\exists m \text{ a term}$'' is to be understood as
\`\`$\exists m \text{ a term in the body of the current }\lambda_p$''

We define the following:

<!--FIXME: use Direct-Calls and Sub-Terms instead of Calls -->
\begin{description}
\item[Subterms]
the the terms that can be found inside a term

\begin{equation}
\begin{array}{r l}
Subterms(f \: v_1 \: \dots \: v_n \: k) = & Subterms_k(k) \\
Subterms(l \: v_1 \: \dots \: v_n) = & \{ \} \\
Subterms(if(\_) \: then \: \_ \: else \: \_) = & \{\}\\
Subterms(let \: x \: = \: v \: in \: m) = & \{ m \} \cup Subterms(m) \\
Subterms(letrec \: \{ \Lambda_i | 0 < i < n \} \: in \: m) = &
  Subterms(m) \cup \bigcup_{0 < i < n} Subterms_{\Lambda}(\Lambda_i)\\
Subterms_k(l) = & \{ \} \\
Subterms_k(\lambda_c \: x \: \cdot \: m) = & m \cup Subterms(m) \\
Subterms_{\Lambda}(f \: = \: \lambda_j \: x \: \dots \: x_{n} \: \cdot \: m) = &
  m \cup Subterms(m)\\
\end{array}
\end{equation}

\begin{verbatim}
let rec subterms t = match t with
  | Mapp  (_, _, Cvar _     ) -> [t]
  | Mapp  (_, _, C    (_, m)) -> t :: subterms m
  | Mcont (_, _) -> [t]
  | Mif   (_, (_, _), (_, _)) -> [t]
  | Mlet  (_, _, m) -> t :: subterms m
  | Mrec  (ls, m) ->
    t :: subterms m @ List.flatten (List.map (fun (_, _, m) -> subterms m) ls)
\end{verbatim}

\item[Calls]
the calls that are made in a CPS term

\begin{equation}
\begin{array}{r l}
Calls(f \: v_1 \: \dots \: v_n \: k) = & Calls_k(k) \\
Calls(l \: v_1 \: \dots \: v_n) = & \{ l \} \\
Calls(if(v) \: then \: l_1 \: v_1 \: \dots \: v_n \: else \: l_2 \: u_1 \: \dots \: u_n) = &
  \{ l1, \: l2 \}\\
Calls(let \: x \: = \: v \: in \: m) = & \{ \} \\
Calls(letrec \: \{ \_ \} \: in \: m) = & \{ \}\\
Calls_k(l) = & \{ l \} \\
Calls_k(\lambda_c \: x \: \cdot \: m) = & \{ \} \\
\end{array}
\end{equation}

\begin{verbatim}
let rec calls = function
  | Mapp  (_, _, Cvar k) -> [k]
  | Mapp  (_, _, C    _) -> []
  | Mcont (k, _) -> [k]
  | Mif   (_, (k1, _), (k2, _)) -> [k1; k2]
  | Mlet  (_, _, _) -> []
  | Mrec  (_, _) -> []
\end{verbatim}
\end{description}

Note that we assume that names are unique (and thus that a function and its
name can be associated). This is a cheap assumption because the context
ensures that functions are named after SSA block labels (which need be
unique).

We naturally extend $Calls$ to apply on sets. This is useful for composing
$Calls$ and $Subterms$ to get all the calls of a term.

\begin{description}
\item[$Siblings$]
children of the same parent.

$Siblings(\Lambda) = L$ such that
$letrec \: L \: in \: m'$ is a term and $\Lambda \in L$

\item[$Head$]
is the name of the continuation a term is the body of

\begin{equation}
\begin{array}{l}
Head(m) = f \Leftrightarrow
Parent(m) =
let \: rec \: \dots \:
       and \: f \: = \: \lambda_j \: \_ \: \cdot \: m \:
       and \: \dots \:
in \: \_ \\
Head(m) \text{ is undefined otherwise}
\end{array}
\end{equation}
\item[$Body$]
is the inverse of $Head$

$Body(f) = m \Leftrightarrow f = Head(m)$
\end{description}


#GVN on CPS

##Code Modifications

Just as with the original GVN algorithm, the code needs to be (automatically)
modified. The three modifications that we apply are:

- landing lambdas insertion,
- trivial-call uninlining, and
- virtual call annotation.

### Landing Lambdas

GVN introduces landing lambdas at the entrance of each loop. These landing
pads allow to move code from \`\`after'' the loop to \`\`before'' it. We call
the corresponding concept in CPS *landing lambdas*.

\begin{description}
\item[Simple loop]
is a term $m$ such as

$Head(m) \in Calls(m)$ and
$\forall f \in Calls(m), f \neq Head(m) \Rightarrow Head(m) \notin Calls(Body(f))$

\item[Simple loop head:]
\texttt{l} is a simple loop head when it is part of

\begin{verbatim}
let rec simple_loop_headers = function
  | Mapp  (_, _, Cvar _     ) -> []
  | Mapp  (_, _, C    (_, m)) -> simple_loop_headers m
  | Mcont (_, _) -> []
  | Mif   (_, (_, _), (_, _)) -> []
  | Mlet  (_, _, m) -> simple_loop_header m
  | Mrec  (ls, m) ->
    simple_loop_headers m
    :: List.fold_left
         (fun a (l, _, m) -> if List.mem l (calls m) then l :: a else a)
         []
         ls
\end{verbatim}
\end{description}


Simple loop headers are the entry nodes of loops that have exactly one entry
node. This, however, is not sufficient to treat all the loop cases.
(TODO:example with inlined even/odd function pair). We thus define the loops
using the following.

\begin{description}
\item[Loop]
$(L, E ,C)$ is a \em{loop} of $m$ if $L$, $C$, and $E$ are maximal sets of
$\Lambda$ such that

\begin{equation}\label{loopdef:0}
L \subseteq E \subseteq C
\end{equation}
\begin{equation}\label{loopdef:1}
m = letrec \: Siblings(L) \: in \: m'
\end{equation}
\begin{equation}\label{loopdef:2}
\begin{array}{r l}
\forall \Lambda, \Lambda' \in L \: \exists \Lambda_0, \dots, \Lambda_n \text{ such that } &
  \Lambda = \Lambda_0, \: \Lambda' = \Lambda_n, \text{ and} \\
& \forall i < n \: Calls(Subterms_{\Lambda}(\Lambda_i)) \ni \Lambda_{i+1} \\
\end{array}
\end{equation}
\begin{equation}\label{loopdef:3}
(Calls(Subterms(m')) \cup Calls(Subterms_{\Lambda}(Siblings(L) - L))) \cap L = E \neq \{\}
\end{equation}
\begin{equation}\label{loopdef:4}
\begin{array}{r l}
\forall \Lambda \in C & Conditional(\Lambda) \\
                      & Calls(Subterms(\Lambda)) \subset L \\
                      & Calls(Subterms(\Lambda)) \subset (Siblings(L) - L) \\
\end{array}
\end{equation}

\end{description}

<!--TODO: use a notation for (Siblings(L)-L) e.g. \overline(L)-->

Elements of $L$ are all siblings \eqref{loopdef:1} with a complete looping
call graph \eqref{loopdef:2}. Elements of $E$ are entry points to the loop
\eqref{loopdef:3}, that is, they are called from the other subterms of $m$.
Elements of $C$ are entry $\Lambda$ that double as exit $\Lambda$
\eqref{loopdef:4}, we call them $entry\text{-}exit$ or $conditional$
$\Lambda$s

The maximality condition is important so as to capture the whole loop.


Introducing Landing Lambdas is achieved by transforming a term in the
following fashion:

\begin{description}
\item[Landing-Lambdas]
if $t = letrec \: L \sqcup M \: in \: m$ has a loop $(L, E ,C)$, then

\begin{equation}
LandingLambda(t) = letrec \: \{ \Lambda \} \cup M \: in \: m'
\end{equation}

where
\begin{equation}
\begin{array}{r l l}
\Lambda & = & pad = \lambda \: i \: args \: \cdot \: letrec \: L \cup C' \: in \: m'' \\
pad & & \text{is a fresh label} \\
args & & \text{is the union of arguments of elements of } E \\
C' & = & C[l = \lambda \: args \: \cdot \: m \: / \: l_{cpad} = \lambda \: args \: \cdot m] \\
m'' & = & letrec \: \{ Dispatch_2 \} \: in \: if (i = 1) \: then \: CallTo(\Lambda_1) \: else \: dispatch_2 \: i \\
Dispatch_i & = & dispatch_i \: = \: \lambda \: j \: \cdot \: letrec \: \{ Dispatch_{i+1} \} \: in if(j=i) \: then CallTo(\Lambda_i) \: else \: dispatch_{i+1} k \\
\iota & : & l \rightarrow [ 1, Card(E) ] \text{ injective} \\
\iota & : & \text{undefined if } l \notin E \\
CallTo(f = \lambda \: args \: \cdot m) & = & f_{cpad} \: args \text{ if } f \in C \\
CallTo(f = \lambda \: args \: \cdot m) & = & f \: args \text{ otherwise} \\
                                  m' & = & m[l \: args \: / \: pad \: \iota(l) \: args ]_{l \in E}
\end{array}
\end{equation}

\end{description}

<!--TODO: find the meaning of "the union of arguments"-->


###Trivial-call Uninlining

In this transformation we add a level of indirection to some calls by
un-inlining a trivial redirection.

\begin{description}
\item[Conditional] tests wheter a term is a conditional

\begin{equation}
\begin{array}{l}
Conditional(m) = True \text{ if } m = if(\_) \: then \: \_ \: else \: \_ \\
Conditional(m) = False \text{ otherwise}
\end{array}
\end{equation}

\item[Uninline]

\begin{equation}
\begin{array}{r l}
Uninline_{left}(if(v) \: then \: l_1 \_ else l_2 \_) = &
letrec \: \{ f \: = \: \lambda \: () \: \cdot \: l_1 \: \_ \: \} \: in \: if(v) \: then \: f \: () \: else \: l_2 \: \_ \\
Uninline_{right}(if(v) \: then \: l_1 \_ else l_2 \_) = &
letrec \: \{ f \: = \: \lambda \: () \: \cdot \: l_2 \: \_ \: \} \: in \: if(v) \: then \: l_1 \: \_ \: else \: f \: () \\
\end{array}
\end{equation}

\item[Needs uninlining]
Considering the term $letrec \: \{ \Lambda_c, \: \Lambda_t \} \cup L \: in \: m$

$c$'s call to $\Lambda_t$ needs uninlining if

\begin{equation}
\begin{array}{l}
\begin{array}{r l l}
c \in Subterms_{\Lambda}(\Lambda_c) & \text{such as} & Conditional(c) \\
                                    &                & Calls(c) \ni \Lambda_t \\
\end{array} \\
Calls(m) \cup Calls_{\Lambda}(L) \ni \Lambda_t
\end{array}
\end{equation}

\end{description}

